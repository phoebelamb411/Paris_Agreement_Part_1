getwd()
list.files("data/raw")
getwd()
list.files("data/raw")
list.files("raw_data")
getwd()
# scripts/make_charts.R
# (running this should create charts in output/figures/ and a summary CSV)
# loading the libraries I’ll need
library(tidyverse)
library(scales)
# I want to start with 5 countries so this stays bite-sized (can add more later)
COUNTRIES <- c("USA","GBR","EU27","JPN","CAN")
# I think smoothing 2015 with a 3-year avg helps with weird noise (covid, etc.)
USE_THREE_YEAR_AVG <- TRUE
# setting up folder paths so I don’t hardcode strings everywhere
RAW_DIR   <- "raw_data"
OUT_DIR   <- "output/figures"
OUT_LINES <- file.path(OUT_DIR, "country_lines")
dir.create(OUT_LINES, recursive = TRUE, showWarnings = FALSE)
# ---- step 1: find the right Climate Watch file automatically ----
# I downloaded a bunch of CSVs; I want to prefer the harmonized ClimateWatch one.
# if it's not there, I’ll fall back to UNFCCC/PRIMAP/GCP/US in that order.
candidate_files <- list.files(RAW_DIR, pattern = "^CW_HistoricalEmissions_.*\\.csv$", full.names = TRUE)
pick_first <- function(pattern) {
match <- grep(pattern, candidate_files, value = TRUE, ignore.case = TRUE)
if (length(match) > 0) match[1] else NA_character_
}
EMISS_PATH <- pick_first("ClimateWatch")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("UNFCCC")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("PRIMAP")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("GCP")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("US")
if (is.na(EMISS_PATH)) stop("hmm I can’t find any 'CW_HistoricalEmissions_*.csv' in data/raw/")
message("ok using this emissions file: ", basename(EMISS_PATH))
# ---- step 2: load the CSV and try to isolate “Total GHG excluding LULUCF” ----
raw <- readr::read_csv(EMISS_PATH, show_col_types = FALSE)
nms <- tolower(names(raw))
# I’m trying “wide format” first (a column literally for total excl. LULUCF)
wide_col <- names(raw)[str_detect(nms, "exclud") & str_detect(nms, "lul")]
has_year <- "year" %in% nms
has_country <- any(nms %in% c("country","location","country/region"))
if (length(wide_col) > 0 && has_year && has_country) {
# yay wide format detected
iso_col <- names(raw)[nms %in% c("iso3","iso","iso_code3")][1]
ctry_col <- names(raw)[nms %in% c("country","location","country/region")][1]
emis <- raw[, c(iso_col, ctry_col, which(nms == "year"), match(wide_col[1], names(raw)))]
names(emis) <- c("iso3","country","year","value_mtco2e")
} else if (all(c("sector","gas","value") %in% nms)) {
# ok fallback: long format with sector/gas/value
# I’ll filter to rows that look like “total excluding LULUCF” and all GHG/kyoto gases
sector_col <- names(raw)[which(nms == "sector")]
gas_col    <- names(raw)[which(nms == "gas")]
emis <- raw %>%
filter(str_detect(.data[[sector_col]], "excl", ignore_case = TRUE),
str_detect(.data[[sector_col]], "lul",  ignore_case = TRUE),
str_detect(.data[[gas_col]], "all|kyoto", ignore_case = TRUE)) %>%
select(
iso3    = any_of(c("iso3","iso","iso_code3")),
country = any_of(c("country","location","country/region")),
year,
value_mtco2e = value
)
} else {
stop("I can’t find 'Total GHG excluding LULUCF' or a sector/gas/value combo. I’ll open the CSV and inspect the columns.")
}
library(readr)
# load just a sample of the file
test <- read_csv("raw_data/CW_HistoricalEmissions_ClimateWatch.csv", n_max = 5)
# show me what columns are in there
colnames(test)
unique(test$sector)
getwd()
# scripts/make_charts.R
# (running this should create charts in output/figures/ and a summary CSV)
# loading the libraries I’ll need
library(tidyverse)
library(scales)
# I want to start with 5 countries so this stays bite-sized (can add more later)
COUNTRIES <- c("USA","GBR","EU27","JPN","CAN")
# I think smoothing 2015 with a 3-year avg helps with weird noise (covid, etc.)
USE_THREE_YEAR_AVG <- TRUE
# setting up folder paths so I don’t hardcode strings everywhere
RAW_DIR   <- "raw_data"
OUT_DIR   <- "output/figures"
OUT_LINES <- file.path(OUT_DIR, "country_lines")
dir.create(OUT_LINES, recursive = TRUE, showWarnings = FALSE)
# ---- step 1: find the right Climate Watch file automatically ----
# I downloaded a bunch of CSVs; I want to prefer the harmonized ClimateWatch one.
# if it's not there, I’ll fall back to UNFCCC/PRIMAP/GCP/US in that order.
candidate_files <- list.files(RAW_DIR, pattern = "^CW_HistoricalEmissions_.*\\.csv$", full.names = TRUE)
pick_first <- function(pattern) {
match <- grep(pattern, candidate_files, value = TRUE, ignore.case = TRUE)
if (length(match) > 0) match[1] else NA_character_
}
EMISS_PATH <- pick_first("ClimateWatch")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("UNFCCC")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("PRIMAP")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("GCP")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("US")
if (is.na(EMISS_PATH)) stop("hmm I can’t find any 'CW_HistoricalEmissions_*.csv' in data/raw/")
message("ok using this emissions file: ", basename(EMISS_PATH))
# ---- step 2: load the CSV and try to isolate “Total GHG excluding LULUCF” ----
raw <- readr::read_csv(EMISS_PATH, show_col_types = FALSE)
nms <- tolower(names(raw))
# I’m trying “wide format” first (a column literally for total excl. LULUCF)
wide_col <- names(raw)[str_detect(nms, "exclud") & str_detect(nms, "lul")]
has_year <- "year" %in% nms
has_country <- any(nms %in% c("country","location","country/region"))
if (length(wide_col) > 0 && has_year && has_country) {
# yay wide format detected
iso_col <- names(raw)[nms %in% c("iso3","iso","iso_code3")][1]
ctry_col <- names(raw)[nms %in% c("country","location","country/region")][1]
emis <- raw[, c(iso_col, ctry_col, which(nms == "year"), match(wide_col[1], names(raw)))]
names(emis) <- c("iso3","country","year","value_mtco2e")
} else if (all(c("sector","gas","value") %in% nms)) {
# ok fallback: long format with sector/gas/value
# I’ll filter to rows that look like “total excluding LULUCF” and all GHG/kyoto gases
sector_col <- names(raw)[which(nms == "sector")]
gas_col    <- names(raw)[which(nms == "gas")]
emis <- raw %>%
filter(str_detect(.data[[sector_col]], "excl", ignore_case = TRUE),
str_detect(.data[[sector_col]], "lul",  ignore_case = TRUE),
str_detect(.data[[gas_col]], "all|kyoto", ignore_case = TRUE)) %>%
select(
iso3    = any_of(c("iso3","iso","iso_code3")),
country = any_of(c("country","location","country/region")),
year,
value_mtco2e = value
)
} else {
stop("I can’t find 'Total GHG excluding LULUCF' or a sector/gas/value combo. I’ll open the CSV and inspect the columns.")
}
# ---- step 2 (patched): load ClimateWatch wide CSV and isolate Total excl. LULUCF ----
raw <- readr::read_csv(EMISS_PATH, show_col_types = FALSE)
# sanity peek (optional)
# print(names(raw)[1:10])
# 1) pivot year columns into long format
year_cols <- grep("^[0-9]{4}$", names(raw), value = TRUE)
if (length(year_cols) == 0) stop("I expected year columns like 1990..2022 in this file")
long <- raw %>%
tidyr::pivot_longer(all_of(year_cols), names_to = "year", values_to = "value_mtco2e") %>%
mutate(year = as.integer(year))
# 2) figure out which Sector string to use
sector_has_excl <- grepl("total", long$Sector, ignore.case = TRUE) &
grepl("excl",  long$Sector, ignore.case = TRUE) &
grepl("lul",   long$Sector, ignore.case = TRUE)
sector_has_incl <- grepl("total", long$Sector, ignore.case = TRUE) &
grepl("incl",  long$Sector, ignore.case = TRUE) &
grepl("lul",   long$Sector, ignore.case = TRUE)
use_excl <- any(sector_has_excl)
if (use_excl) {
sector_keep <- grepl("total", long$Sector, TRUE) & grepl("excl", long$Sector, TRUE) & grepl("lul", long$Sector, TRUE)
} else if (any(sector_has_incl)) {
warning("Could not find 'Total excluding LULUCF'. Using 'Total including LULUCF' as a fallback.")
sector_keep <- grepl("total", long$Sector, TRUE) & grepl("incl", long$Sector, TRUE) & grepl("lul", long$Sector, TRUE)
} else {
stop("I couldn't find a 'Total ... LULUCF' sector. Here are some examples:\n",
paste(head(unique(long$Sector), 20), collapse = "\n"))
}
# 3) limit to all-GHG/kyoto gases + chosen sector
emis <- long %>%
dplyr::filter(
sector_keep,
grepl("all|kyoto", Gas, ignore.case = TRUE)
) %>%
dplyr::transmute(
iso3    = NA_character_,   # this file doesn’t have ISO3; I’ll map for my 5
country = Country,
year,
value_mtco2e
)
# 4) map country names to ISO3 for the 5 I care about
emis <- emis %>%
dplyr::mutate(
iso3 = dplyr::case_when(
country == "United States" ~ "USA",
country == "United Kingdom" ~ "GBR",
country %in% c("European Union","European Union (27)") ~ "EU27",
country == "Japan" ~ "JPN",
country == "Canada" ~ "CAN",
TRUE ~ iso3
)
) %>%
# keep just my study countries (by iso3)
dplyr::filter(!is.na(iso3) & iso3 %in% COUNTRIES)
# quick check
dim(emis); head(emis)
# what does Sector actually look like?
sort(unique(long$Sector))[1:30]
# what does Gas look like?
sort(unique(long$Gas))
# sanity check: do my 5 countries exist exactly like this?
table(long$Country %in% c("United States","United Kingdom","European Union","European Union (27)","Japan","Canada"))
sort(unique(long$Country[grepl("United", long$Country)]))[1:20]
sort(unique(long$Country[grepl("European Union", long$Country)]))
sort(unique(long$Country[grepl("Japan", long$Country)]))
sort(unique(long$Country[grepl("Canada", long$Country)]))
# ---- step 2 (patched x2): load ClimateWatch wide CSV and isolate Total excl. LULUCF ----
raw <- readr::read_csv(EMISS_PATH, show_col_types = FALSE)
# pivot the wide year columns into long format
year_cols <- grep("^[0-9]{4}$", names(raw), value = TRUE)
if (length(year_cols) == 0) stop("I expected year columns like 1990..2022 in this file")
long <- raw %>%
tidyr::pivot_longer(all_of(year_cols), names_to = "year", values_to = "value_mtco2e") %>%
mutate(year = as.integer(year))
# ---- detect the country column automatically ----
possible_country_cols <- names(raw)[
grepl("^country($|/|\\s|_)", names(raw), ignore.case = TRUE) |
grepl("location|region|territory|area", names(raw), ignore.case = TRUE)
]
if (length(possible_country_cols) == 0) stop("I can't find a country column in this file.")
country_col <- possible_country_cols[1]
# create a clean field
long <- long %>%
mutate(country_raw = trimws(.data[[country_col]]))
# prefer Total excluding LULUCF, fallback to including
sector_excl <- grepl("total", long$Sector, TRUE) & grepl("excl", long$Sector, TRUE) & grepl("lu?l?ucf", long$Sector, TRUE)
sector_incl <- grepl("total", long$Sector, TRUE) & grepl("incl", long$Sector, TRUE) & grepl("lu?l?ucf", long$Sector, TRUE)
if (any(sector_excl, na.rm = TRUE)) {
sector_keep <- sector_excl
} else if (any(sector_incl, na.rm = TRUE)) {
warning("Using 'Total including LULUCF' as a fallback.")
sector_keep <- sector_incl
} else {
stop("No 'Total ... LULUCF' sector found.")
}
# allow All/Kyoto/GHG
gas_keep <- grepl("all|kyoto|ghg", long$Gas, ignore.case = TRUE)
# final filter + ISO3 mapping
emis <- long %>%
filter(sector_keep & gas_keep) %>%
mutate(
iso3 = case_when(
grepl("^United\\s+States", country_raw, TRUE) ~ "USA",
grepl("^United\\s+Kingdom", country_raw, TRUE) ~ "GBR",
grepl("^European\\s+Union", country_raw, TRUE) ~ "EU27",
grepl("^Japan$", country_raw, TRUE) ~ "JPN",
grepl("^Canada$", country_raw, TRUE) ~ "CAN",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(iso3) & iso3 %in% COUNTRIES) %>%
transmute(
iso3,
country = country_raw,
year,
value_mtco2e
)
dim(emis)
dplyr::count(emis, iso3)
head(emis)
readr::read_csv("raw_data/targets.csv", show_col_types = FALSE)
getwd()
# scripts/make_charts.R
# (running this should create charts in output/figures/ and a summary CSV)
# loading the libraries I’ll need
library(tidyverse)
library(scales)
# I want to start with 5 countries so this stays bite-sized (can add more later)
COUNTRIES <- c("USA","GBR","EU27","JPN","CAN")
# I think smoothing 2015 with a 3-year avg helps with weird noise (covid, etc.)
USE_THREE_YEAR_AVG <- TRUE
# setting up folder paths so I don’t hardcode strings everywhere
RAW_DIR   <- "raw_data"
OUT_DIR   <- "output/figures"
OUT_LINES <- file.path(OUT_DIR, "country_lines")
dir.create(OUT_LINES, recursive = TRUE, showWarnings = FALSE)
# ---- step 1: find the right Climate Watch file automatically ----
# I downloaded a bunch of CSVs; I want to prefer the harmonized ClimateWatch one.
# if it's not there, I’ll fall back to UNFCCC/PRIMAP/GCP/US in that order.
candidate_files <- list.files(RAW_DIR, pattern = "^CW_HistoricalEmissions_.*\\.csv$", full.names = TRUE)
pick_first <- function(pattern) {
match <- grep(pattern, candidate_files, value = TRUE, ignore.case = TRUE)
if (length(match) > 0) match[1] else NA_character_
}
EMISS_PATH <- pick_first("ClimateWatch")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("UNFCCC")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("PRIMAP")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("GCP")
if (is.na(EMISS_PATH)) EMISS_PATH <- pick_first("US")
if (is.na(EMISS_PATH)) stop("hmm I can’t find any 'CW_HistoricalEmissions_*.csv' in data/raw/")
message("ok using this emissions file: ", basename(EMISS_PATH))
# ---- step 2 (clean & sturdy, patched 3x): get Total (excl LULUCF) + All GHG for my 5 countries ----
raw <- readr::read_csv(EMISS_PATH, show_col_types = FALSE)
# 1) Make sure I really have a country column and clean it
if (!"Country" %in% names(raw)) stop("I expected a 'Country' column in this file.")
raw <- raw %>% mutate(country_raw = trimws(Country))
# 2) Pivot the wide years (1990..2022) into tidy rows
year_cols <- grep("^[0-9]{4}$", names(raw), value = TRUE)
if (length(year_cols) == 0) stop("I expected year columns like 1990..2022 in this file")
long <- raw %>%
tidyr::pivot_longer(all_of(year_cols), names_to = "year", values_to = "value_mtco2e") %>%
mutate(year = as.integer(year))
# 3) Choose Sector = Total excluding LULUCF (fallback to including if needed)
sector_excl <- grepl("total", long$Sector, TRUE) & grepl("excl", long$Sector, TRUE) & grepl("lu?l?ucf", long$Sector, TRUE)
sector_incl <- grepl("total", long$Sector, TRUE) & grepl("incl", long$Sector, TRUE) & grepl("lu?l?ucf", long$Sector, TRUE)
sector_keep <- if (any(sector_excl, na.rm = TRUE)) sector_excl else {
if (any(sector_incl, na.rm = TRUE)) {
warning("Using 'Total including LULUCF' as a fallback.")
sector_incl
} else stop("No 'Total ... LULUCF' sector found.")
}
# 4) Keep All GHG / Kyoto / GHG
gas_keep <- grepl("all|kyoto|ghg", long$Gas, ignore.case = TRUE)
# 5) Filter to my 5 countries using flexible name matching, then map to ISO3
emis <- long %>%
filter(sector_keep & gas_keep) %>%
mutate(
iso3 = dplyr::case_when(
grepl("United\\s+States", country_raw, TRUE) ~ "USA",                        # catches 'United States of America'
grepl("United\\s+Kingdom", country_raw, TRUE) ~ "GBR",                       # catches long UK name
grepl("^European\\s+Union", country_raw, TRUE) ~ "EU27",                     # catches 'European Union (27)'
grepl("^Japan$", country_raw, TRUE) ~ "JPN",
grepl("^Canada$", country_raw, TRUE) ~ "CAN",
TRUE ~ NA_character_
)
) %>%
filter(!is.na(iso3) & iso3 %in% COUNTRIES) %>%
transmute(
iso3,
country = country_raw,
year,
value_mtco2e
)
# sanity check
dim(emis); dplyr::count(emis, iso3); head(emis)
#confirming targets.csv is present
readr::read_csv("raw_data/targets.csv", show_col_types = FALSE)
emis <- long %>%
dplyr::filter(sector_keep & gas_keep) %>%
dplyr::mutate(
iso3 = dplyr::case_when(
grepl("United\\s+States", country_raw, ignore.case = TRUE) ~ "USA",
grepl("United\\s+States\\s+of\\s+America", country_raw, ignore.case = TRUE) ~ "USA",
grepl("^United\\s+Kingdom", country_raw, ignore.case = TRUE) ~ "GBR",
grepl("United\\s+Kingdom\\s+of\\s+Great\\s+Britain", country_raw, ignore.case = TRUE) ~ "GBR",
grepl("^European\\s+Union", country_raw, ignore.case = TRUE) ~ "EU27",
grepl("European\\s+Union\\s*\\(27\\)", country_raw, ignore.case = TRUE) ~ "EU27",
grepl("^Japan$", country_raw, ignore.case = TRUE) ~ "JPN",
grepl("^Canada$", country_raw, ignore.case = TRUE) ~ "CAN",
TRUE ~ NA_character_
)
) %>%
dplyr::filter(!is.na(iso3) & iso3 %in% COUNTRIES) %>%
dplyr::transmute(
iso3,
country = country_raw,
year,
value_mtco2e
)
# sanity check
dim(emis); dplyr::count(emis, iso3); head(emis)
library(tidyverse)
auctionData <- read.csv ("AuctionInfo_W4Live.csv")
head(acutionData)
auctionData <- read.csv("/Users/phoebe/Desktop/First Quarter/GU/Programming 1/FirstQuarterAuctionInfo_W4Live.csv")
auctionData <- read.csv("/Users/phoebe/Desktop/First Quarter/GU/Programming 1/Week 4/Live 4/FirstQuarterAuctionInfo_W4Live.csv")
auctionData <- read.csv("/Users/student/Desktop/GU/First quarter/Programming 1/FirstQuarterAuctionInfo_W4Live.csv")
auctionData <- read.csv("/Users/student/Desktop/GU/First quarter/Programming 1/week4_live4/AuctionInfo_W4Live.csv")
auctionData <- read.csv("/Users/student/Desktop/GU/First quarter/Programming 1/week 4_live 4"")
head(auctionData)
main = "Duration vs Closing Price")
plot(ClosingPrice ~ Duration, data = auctionData,
pch = 17, col = "mediumpurple", cex = 2,
xlab = "Auction Duration (days)",
ylab = "Closing Price ($)",
main = "Duration vs Closing Price")
auctionData <- read.csv("/Users/student/Desktop/GU/First quarter/Programming 1/week 4_live 4")
library(tidyverse)
auctionData <- read.csv("/Users/student/Desktop/GU/First quarter/Programming 1/week 4_live 4/AuctionInfo_W4Live.csv")
head(auctionData)
plot(ClosingPrice ~ Duration, data = auctionData,
pch = 17, col = "mediumpurple", cex = 2,
xlab = "Auction Duration (days)",
ylab = "Closing Price ($)",
main = "Duration vs Closing Price")
head(auctionData)
plot(ClosePrice ~ Duration, data = auctionData,
pch = 17, col = "mediumpurple", cex = 2,
xlab = "Auction Duration (days)",
ylab = "Closing Price ($)",
main = "Duration vs Closing Price")
